// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApplicationAPI.Contexts;

#nullable disable

namespace MusicApplicationAPI.Migrations
{
    [DbContext(typeof(MusicManagementContext))]
    [Migration("20240801100759_ArtistRoleAdded")]
    partial class ArtistRoleAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"), 1L, 1);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            AlbumId = 1,
                            ArtistId = 1,
                            CoverImageUrl = "http://example.com/album1.jpg",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Album One"
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            ArtistId = 1,
                            Bio = "Bio of Artist One",
                            Email = "artist1@gmail.com",
                            ImageUrl = "http://example.com/artist1.jpg",
                            Name = "Artist One",
                            PasswordHash = new byte[] { 152, 103, 173, 186, 156, 94, 253, 211, 87, 250, 186, 218, 175, 88, 68, 203, 195, 143, 139, 159, 236, 76, 226, 244, 212, 81, 235, 59, 168, 168, 125, 245, 158, 179, 101, 145, 26, 197, 112, 135, 223, 96, 45, 45, 110, 165, 93, 8, 144, 149, 102, 69, 114, 230, 149, 221, 39, 123, 155, 64, 52, 98, 245, 159 },
                            PasswordHashKey = new byte[] { 102, 208, 177, 109, 92, 237, 84, 216, 94, 224, 56, 219, 41, 2, 3, 21, 148, 187, 214, 68, 203, 71, 254, 158, 252, 96, 47, 57, 12, 104, 141, 162, 226, 155, 233, 146, 241, 28, 168, 90, 211, 92, 173, 164, 154, 84, 244, 252, 174, 217, 147, 57, 242, 151, 227, 192, 48, 4, 133, 99, 231, 177, 107, 100, 225, 14, 127, 121, 7, 220, 19, 203, 54, 42, 201, 62, 116, 4, 153, 213, 39, 38, 118, 53, 226, 186, 84, 178, 203, 169, 137, 66, 82, 33, 222, 254, 167, 153, 204, 196, 86, 13, 235, 39, 86, 9, 188, 118, 131, 6, 86, 68, 57, 50, 187, 54, 181, 235, 197, 142, 7, 64, 209, 191, 247, 73, 113, 181 },
                            Role = 4,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"), 1L, 1);

                    b.Property<int?>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int?>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            SongId = 1,
                            UserId = 102
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            ImageUrl = "https://some-url",
                            IsPublic = true,
                            Name = "Playlist One",
                            UserId = 102
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistSongId"), 1L, 1);

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistSongId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");

                    b.HasData(
                        new
                        {
                            PlaylistSongId = 1,
                            PlaylistId = 1,
                            SongId = 1
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.PremiumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastNotifiedOneHourBefore")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastNotifiedTwoDaysBefore")
                        .HasColumnType("datetime2");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PremiumUsers");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            RatingValue = 5,
                            SongId = 1,
                            UserId = 102
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongId"), 1L, 1);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            SongId = 1,
                            AlbumId = 1,
                            ArtistId = 1,
                            Duration = 120,
                            Genre = 0,
                            ImageUrl = "https://some-url",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Song One",
                            Url = "http://example.com/song1.mp3"
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 101,
                            DOB = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kousik@gmail.com",
                            PasswordHash = new byte[] { 72, 59, 69, 22, 77, 172, 24, 199, 91, 179, 246, 199, 150, 249, 55, 113, 91, 19, 161, 206, 13, 119, 1, 76, 144, 73, 177, 216, 210, 169, 122, 249, 81, 101, 113, 63, 131, 6, 114, 112, 87, 231, 70, 72, 188, 144, 138, 59, 103, 130, 248, 2, 195, 79, 73, 10, 168, 233, 141, 1, 131, 76, 193, 16 },
                            PasswordHashKey = new byte[] { 102, 208, 177, 109, 92, 237, 84, 216, 94, 224, 56, 219, 41, 2, 3, 21, 148, 187, 214, 68, 203, 71, 254, 158, 252, 96, 47, 57, 12, 104, 141, 162, 226, 155, 233, 146, 241, 28, 168, 90, 211, 92, 173, 164, 154, 84, 244, 252, 174, 217, 147, 57, 242, 151, 227, 192, 48, 4, 133, 99, 231, 177, 107, 100, 225, 14, 127, 121, 7, 220, 19, 203, 54, 42, 201, 62, 116, 4, 153, 213, 39, 38, 118, 53, 226, 186, 84, 178, 203, 169, 137, 66, 82, 33, 222, 254, 167, 153, 204, 196, 86, 13, 235, 39, 86, 9, 188, 118, 131, 6, 86, 68, 57, 50, 187, 54, 181, 235, 197, 142, 7, 64, 209, 191, 247, 73, 113, 181 },
                            Phone = "9790852900",
                            Role = 1,
                            Username = "Kousik Raj"
                        },
                        new
                        {
                            UserId = 102,
                            DOB = new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mathew@gmail.com",
                            PasswordHash = new byte[] { 54, 169, 5, 131, 226, 93, 193, 108, 110, 185, 139, 155, 250, 67, 123, 111, 7, 123, 170, 25, 215, 232, 242, 132, 138, 191, 63, 91, 195, 159, 109, 75, 124, 245, 27, 250, 225, 24, 137, 21, 111, 194, 224, 198, 119, 187, 104, 227, 20, 81, 50, 4, 83, 105, 167, 57, 249, 64, 202, 105, 232, 224, 187, 65 },
                            PasswordHashKey = new byte[] { 102, 208, 177, 109, 92, 237, 84, 216, 94, 224, 56, 219, 41, 2, 3, 21, 148, 187, 214, 68, 203, 71, 254, 158, 252, 96, 47, 57, 12, 104, 141, 162, 226, 155, 233, 146, 241, 28, 168, 90, 211, 92, 173, 164, 154, 84, 244, 252, 174, 217, 147, 57, 242, 151, 227, 192, 48, 4, 133, 99, 231, 177, 107, 100, 225, 14, 127, 121, 7, 220, 19, 203, 54, 42, 201, 62, 116, 4, 153, 213, 39, 38, 118, 53, 226, 186, 84, 178, 203, 169, 137, 66, 82, 33, 222, 254, 167, 153, 204, 196, 86, 13, 235, 39, 86, 9, 188, 118, 131, 6, 86, 68, 57, 50, 187, 54, 181, 235, 197, 142, 7, 64, 209, 191, 247, 73, 113, 181 },
                            Phone = "9012382181",
                            Role = 2,
                            Username = "Mathew"
                        });
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Album", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.EmailVerification", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.User", "User")
                        .WithOne("EmailVerification")
                        .HasForeignKey("MusicApplicationAPI.Models.DbModels.EmailVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Favorite", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.Playlist", "Playlist")
                        .WithMany("Favorites")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MusicApplicationAPI.Models.DbModels.Song", "Song")
                        .WithMany("Favorites")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicApplicationAPI.Models.DbModels.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Playlist", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.PlaylistSong", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApplicationAPI.Models.DbModels.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.PremiumUser", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.User", "User")
                        .WithOne()
                        .HasForeignKey("MusicApplicationAPI.Models.DbModels.PremiumUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Rating", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.Song", "Song")
                        .WithMany("Ratings")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApplicationAPI.Models.DbModels.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Song", b =>
                {
                    b.HasOne("MusicApplicationAPI.Models.DbModels.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusicApplicationAPI.Models.DbModels.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Playlist", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.Song", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("PlaylistSongs");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MusicApplicationAPI.Models.DbModels.User", b =>
                {
                    b.Navigation("EmailVerification");

                    b.Navigation("Favorites");

                    b.Navigation("Playlists");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
